/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package arduinointerface;

import java.awt.Color;
import java.awt.Image;
import java.io.IOException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.imageio.ImageIO;
import javax.swing.JFrame;
import jssc.SerialPort;
import jssc.SerialPortEvent;
import jssc.SerialPortEventListener;
import jssc.SerialPortException;
import jssc.SerialPortList;

/**
 *
 * @author pc
 */
public class Main_Frm extends javax.swing.JFrame {

    /**
     * Creates new form Main_Frm
     */
    public Main_Frm() {
        initComponents();
    }
    
    SerialPort ArduinoPort;
    String receivedLineBuffer = "";
    String rtln = "\r\n";

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        Connenct_Panel = new javax.swing.JPanel();
        refrechButton = new javax.swing.JButton();
        portList = new javax.swing.JComboBox<>();
        connectButton = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        Option1_Btn = new javax.swing.JButton();
        Option2_Btn = new javax.swing.JButton();
        Option3_Btn = new javax.swing.JButton();
        Option4_Btn = new javax.swing.JButton();
        btn_1_lbl = new javax.swing.JLabel();
        btn_2_lbl = new javax.swing.JLabel();
        btn_3_lbl = new javax.swing.JLabel();
        btn_4_lbl = new javax.swing.JLabel();
        lblshow = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowOpened(java.awt.event.WindowEvent evt) {
                formWindowOpened(evt);
            }
        });

        Connenct_Panel.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Select Port", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 0, 14))); // NOI18N

        refrechButton.setText("Refrech");
        refrechButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                refrechButtonActionPerformed(evt);
            }
        });

        portList.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        portList.setName(""); // NOI18N
        portList.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                portListActionPerformed(evt);
            }
        });

        connectButton.setText("Connect");
        connectButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                connectButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout Connenct_PanelLayout = new javax.swing.GroupLayout(Connenct_Panel);
        Connenct_Panel.setLayout(Connenct_PanelLayout);
        Connenct_PanelLayout.setHorizontalGroup(
            Connenct_PanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(Connenct_PanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(refrechButton)
                .addGap(18, 18, 18)
                .addComponent(portList, javax.swing.GroupLayout.PREFERRED_SIZE, 83, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(connectButton)
                .addContainerGap(42, Short.MAX_VALUE))
        );
        Connenct_PanelLayout.setVerticalGroup(
            Connenct_PanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(Connenct_PanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(Connenct_PanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(refrechButton)
                    .addComponent(portList, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(connectButton))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Controle", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 0, 14))); // NOI18N

        Option1_Btn.setText("PIN 10");
        Option1_Btn.setEnabled(false);
        Option1_Btn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Option1_BtnActionPerformed(evt);
            }
        });

        Option2_Btn.setText("PIN 11");
        Option2_Btn.setEnabled(false);
        Option2_Btn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Option2_BtnActionPerformed(evt);
            }
        });

        Option3_Btn.setText("PIN 12");
        Option3_Btn.setEnabled(false);
        Option3_Btn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Option3_BtnActionPerformed(evt);
            }
        });

        Option4_Btn.setText("PIN 13");
        Option4_Btn.setEnabled(false);
        Option4_Btn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Option4_BtnActionPerformed(evt);
            }
        });

        btn_1_lbl.setForeground(java.awt.Color.red);
        btn_1_lbl.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        btn_1_lbl.setText("PIN 10 OFF");
        btn_1_lbl.setEnabled(false);

        btn_2_lbl.setForeground(java.awt.Color.red);
        btn_2_lbl.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        btn_2_lbl.setText("PIN 11 OFF");
        btn_2_lbl.setEnabled(false);

        btn_3_lbl.setForeground(java.awt.Color.red);
        btn_3_lbl.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        btn_3_lbl.setText("PIN 12 OFF");
        btn_3_lbl.setEnabled(false);

        btn_4_lbl.setForeground(java.awt.Color.red);
        btn_4_lbl.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        btn_4_lbl.setText("PIN 13 OFF");
        btn_4_lbl.setEnabled(false);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(Option1_Btn)
                        .addGap(18, 18, 18)
                        .addComponent(btn_1_lbl, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(Option3_Btn)
                        .addGap(18, 18, 18)
                        .addComponent(btn_3_lbl, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(Option4_Btn)
                        .addGap(18, 18, 18)
                        .addComponent(btn_4_lbl, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(Option2_Btn)
                        .addGap(18, 18, 18)
                        .addComponent(btn_2_lbl, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(btn_1_lbl, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(Option1_Btn, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(Option2_Btn)
                    .addComponent(btn_2_lbl, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(Option3_Btn)
                    .addComponent(btn_3_lbl, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(Option4_Btn)
                    .addComponent(btn_4_lbl, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        lblshow.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        lblshow.setForeground(java.awt.Color.red);
        lblshow.setText("Not Connected");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(Connenct_Panel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(lblshow, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(Connenct_Panel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(lblshow, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void refrechButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_refrechButtonActionPerformed
        if (connectButton.getText().equals("Connect")) {
            portList.removeAllItems();
            String[] serialPortNames = SerialPortList.getPortNames();
            for (String serialPortName : serialPortNames) {
                portList.addItem(serialPortName);
            }
        }
    }//GEN-LAST:event_refrechButtonActionPerformed

    private void formWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowOpened
        // TODO add your handling code here:
        this.setLocationRelativeTo(null);
        this.setTitle("Arduino Interface");
        this.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        
        try {
            Image iconimage = ImageIO.read(getClass().getResource("icon.ico"));
            this.setIconImage(iconimage);
        } catch (IOException ex) {
            Logger.getLogger(Main_Frm.class.getName()).log(Level.SEVERE, null, ex);
        }
        
        portList.removeAllItems();
        String[] serialPortNames = SerialPortList.getPortNames();
        for (String serialPortName : serialPortNames) {
            portList.addItem(serialPortName);
        }
    }//GEN-LAST:event_formWindowOpened

    private void portListActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_portListActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_portListActionPerformed

    private void connectButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_connectButtonActionPerformed
        if (connectButton.getText().equals("Connect")) {
                    String selectedPort = (String) portList.getSelectedItem();
                    ArduinoPort = new SerialPort(selectedPort);
                    try {
                        ArduinoPort.openPort();
                        ArduinoPort.setParams(SerialPort.BAUDRATE_115200,
                                             SerialPort.DATABITS_8,
                                             SerialPort.STOPBITS_1,
                                             SerialPort.PARITY_NONE,
                                             false,
                                             true);
                        ArduinoPort.setFlowControlMode(SerialPort.FLOWCONTROL_NONE);

                        ArduinoPort.addEventListener(new PortReader(), SerialPort.MASK_RXCHAR);

                        Option1_Btn.setEnabled(true);
                        Option2_Btn.setEnabled(true);
                        Option3_Btn.setEnabled(true);
                        Option4_Btn.setEnabled(true);
                        
                        btn_1_lbl.setEnabled(true);
                        btn_2_lbl.setEnabled(true);
                        btn_3_lbl.setEnabled(true);
                        btn_4_lbl.setEnabled(true);
                        
                        refrechButton.setEnabled(false);
                        portList.setEnabled(false);

                        connectButton.setText("Disconnect");
                        lblshow.setText("Connected");
                        lblshow.setForeground(Color.green);
                    }
                    catch (SerialPortException ex) {
                        System.out.println("There are an error on writing string to port т: " + ex);
                    }
                }else {
                    try {
                        ArduinoPort.removeEventListener();

                        if(ArduinoPort.isOpened()){
                            ArduinoPort.closePort();
                        }
                        
                        Option1_Btn.setEnabled(false);
                        Option2_Btn.setEnabled(false);
                        Option3_Btn.setEnabled(false);
                        Option4_Btn.setEnabled(false);
                        
                        btn_1_lbl.setEnabled(false);
                        btn_2_lbl.setEnabled(false);
                        btn_3_lbl.setEnabled(false);
                        btn_4_lbl.setEnabled(false);
                        
                        refrechButton.setEnabled(true);
                        portList.setEnabled(true);

                        connectButton.setText("Connect");
                        lblshow.setText("Not Connected");
                        lblshow.setForeground(Color.red);
                    } catch (SerialPortException ex) {
                        Logger.getLogger(Main_Frm.class.getName()).log(Level.SEVERE, null, ex);
                    }
                }
    }//GEN-LAST:event_connectButtonActionPerformed

    private void Option1_BtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Option1_BtnActionPerformed
        try {
            ArduinoPort.writeBytes("A".getBytes());
        } catch (SerialPortException ex) {
            System.out.println("There are an error on writing string to port т: " + ex);
        }
    }//GEN-LAST:event_Option1_BtnActionPerformed

    private void Option2_BtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Option2_BtnActionPerformed
        try {
            ArduinoPort.writeBytes("B".getBytes());
        } catch (SerialPortException ex) {
            System.out.println("There are an error on writing string to port т: " + ex);
        }
    }//GEN-LAST:event_Option2_BtnActionPerformed

    private void Option3_BtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Option3_BtnActionPerformed
        try {
            ArduinoPort.writeBytes("C".getBytes());
        } catch (SerialPortException ex) {
            System.out.println("There are an error on writing string to port т: " + ex);
        }
    }//GEN-LAST:event_Option3_BtnActionPerformed

    private void Option4_BtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Option4_BtnActionPerformed
        try {
            ArduinoPort.writeBytes("D".getBytes());
        } catch (SerialPortException ex) {
            System.out.println("There are an error on writing string to port т: " + ex);
        }
    }//GEN-LAST:event_Option4_BtnActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Main_Frm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Main_Frm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Main_Frm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Main_Frm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Main_Frm().setVisible(true);
            }
        });
    }
    
    public class PortReader implements SerialPortEventListener {

        @Override
        public void serialEvent(SerialPortEvent event) {
            if(event.isRXCHAR() && event.getEventValue() > 0) {
                try {
                    byte receivedDataBuffer[] = ArduinoPort.readBytes();
                    for(byte b: receivedDataBuffer) {
                        if(b == '\r' || b == '\n') {
                            if(receivedLineBuffer.length() > 0) {
                                executeLine(receivedLineBuffer);
                                receivedLineBuffer = "";
                            }
                        } else {
                            receivedLineBuffer += (char) b;
                        }
                    }
                }
                catch (SerialPortException ex) {
                    System.out.println("Error in receiving string from COM-port: " + ex);
                }
            }
        }

        private void executeLine(String line) {
            
            String[] splited = line.split(" ");
            if("10".equals(splited[1])) {
                btn_1_lbl.setText(line);
                if("ON".equals(splited[2])) {
                    btn_1_lbl.setForeground(Color.blue);
                } else {
                    btn_1_lbl.setForeground(Color.red);
                }
            } else if("11".equals(splited[1])) {
                btn_2_lbl.setText(line);
                if("ON".equals(splited[2])) {
                    btn_2_lbl.setForeground(Color.blue);
                } else {
                    btn_2_lbl.setForeground(Color.red);
                }
            } else if("12".equals(splited[1])) {
                btn_3_lbl.setText(line);
                if("ON".equals(splited[2])) {
                    btn_3_lbl.setForeground(Color.blue);
                } else {
                    btn_3_lbl.setForeground(Color.red);
                }
            } else if("13".equals(splited[1])) {
                btn_4_lbl.setText(line);
                if("ON".equals(splited[2])) {
                    btn_4_lbl.setForeground(Color.blue);
                } else {
                    btn_4_lbl.setForeground(Color.red);
                }
            }
            
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel Connenct_Panel;
    private javax.swing.JButton Option1_Btn;
    private javax.swing.JButton Option2_Btn;
    private javax.swing.JButton Option3_Btn;
    private javax.swing.JButton Option4_Btn;
    private javax.swing.JLabel btn_1_lbl;
    private javax.swing.JLabel btn_2_lbl;
    private javax.swing.JLabel btn_3_lbl;
    private javax.swing.JLabel btn_4_lbl;
    private javax.swing.JButton connectButton;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JLabel lblshow;
    private javax.swing.JComboBox<String> portList;
    private javax.swing.JButton refrechButton;
    // End of variables declaration//GEN-END:variables
}
